// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments          Comment[]
    Post              Post[]

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
}

model Post {
    id          Int       @id @default(autoincrement())
    title       String
    slug        String    @unique
    authorId    String
    author      Account   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    content     String    @db.Text
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    comments    Comment[]

    @@index([authorId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    authorId  String
    author    Account  @relation(fields: [authorId], references: [id], onDelete: Cascade)
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([postId])
    @@index([authorId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
